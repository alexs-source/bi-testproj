@{
    ViewData["Title"] = "Home Page";
}
@section scripts {
    <script>
        // Set new default font family and font color to mimic Bootstrap's default styling
        Chart.defaults.global.defaultFontFamily = '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
        Chart.defaults.global.defaultFontColor = '#292b2c';

        // Chart Adhoc Results
        var chartSettingsAdhoc = {
            type: 'bar',
            data: {
                labels: @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.LabelsAdhoc),
                datasets: [{
                    label: "Succeded",
                    lineTension: 0.3,
                    backgroundColor: "rgba(2,117,216,0.2)",
                    borderColor: "rgba(2,117,216,1)",
                    pointRadius: 5,
                    pointBackgroundColor: "rgba(2,117,216,1)",
                    pointBorderColor: "rgba(255,255,255,0.8)",
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: "rgba(2,117,216,1)",
                    pointHitRadius: 50,
                    pointBorderWidth: 2,
                    data: @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.DataSucceededAdhoc),
                },
                {
                    label: "Failed",
                    lineTension: 0.3,
                    backgroundColor: "rgba(255,117,216,0.2)",
                    borderColor: "rgba(255,117,216,1)",
                    pointRadius: 5,
                    pointBackgroundColor: "rgba(255,117,216,1)",
                    pointBorderColor: "rgba(255,255,255,0.8)",
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: "rgba(255,117,216,1)",
                    pointHitRadius: 50,
                    pointBorderWidth: 2,
                    data: @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.DataFailedAdhoc),
                }],
            },
            options: {
                scales: {
                    xAxes: [{
                        time: {
                            unit: 'date'
                        },
                        gridLines: {
                            display: false
                        },
                        ticks: {
                            maxTicksLimit: 7
                        },
                        stacked: true
                    }],
                    yAxes: [{
                        ticks: {
                            min: 0,
                            max: @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.MaxYTickAdhoc),
                            maxTicksLimit: 5
                        },
                        gridLines: {
                            color: "rgba(0, 0, 0, .125)",
                        },
                        stacked: true
                    }],
                },
                legend: {
                    display: true
                }
            }
        };

        var chartSettingsBatch = {
            type: 'bar',
            data: {
                labels: @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.LabelsBatch),
                datasets: [{
                    label: "Succeded",
                    lineTension: 0.3,
                    backgroundColor: "rgba(2,117,216,0.2)",
                    borderColor: "rgba(2,117,216,1)",
                    pointRadius: 5,
                    pointBackgroundColor: "rgba(2,117,216,1)",
                    pointBorderColor: "rgba(255,255,255,0.8)",
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: "rgba(2,117,216,1)",
                    pointHitRadius: 50,
                    pointBorderWidth: 2,
                    data: @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.DataSucceededBatch),
                },
                {
                    label: "Failed",
                    lineTension: 0.3,
                    backgroundColor: "rgba(255,117,216,0.2)",
                    borderColor: "rgba(255,117,216,1)",
                    pointRadius: 5,
                    pointBackgroundColor: "rgba(255,117,216,1)",
                    pointBorderColor: "rgba(255,255,255,0.8)",
                    pointHoverRadius: 5,
                    pointHoverBackgroundColor: "rgba(255,117,216,1)",
                    pointHitRadius: 50,
                    pointBorderWidth: 2,
                    data: @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.DataFailedBatch),
                }],
            },
            options: {
                scales: {
                    xAxes: [{
                        time: {
                            unit: 'date'
                        },
                        gridLines: {
                            display: false
                        },
                        ticks: {
                            maxTicksLimit: 7
                        },
                        stacked: true
                    }],
                    yAxes: [{
                        ticks: {
                            min: 0,
                            max: @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.MaxYTickBatch),
                            maxTicksLimit: 5
                        },
                        gridLines: {
                            color: "rgba(0, 0, 0, .125)",
                        },
                        stacked: true
                    }],
                },
                legend: {
                    display: true
                }
            }
        };

        var chartSettingsMessages = {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.nErrorMessages),
                    backgroundColor: @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.MessageBackgroundColors),
                    //backgroundColor: [
                    //    'rgba(255, 99, 132, 0.2)',
                    //    'rgba(54, 162, 235, 0.2)',
                    //    'rgba(255, 206, 86, 0.2)',
                    //    'rgba(75, 192, 192, 0.2)',
                    //    'rgba(153, 102, 255, 0.2)',
                    //    'rgba(255, 159, 64, 0.2)'
                    //],
                    label: 'Error Messages'
                }],
                labels: @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.ErrorMessages)
            },
            options: {
                responsive: true,
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: 'Error Messages'
                },
                animation: {
                    animateScale: true,
                    animateRotate: true
                }
            }
        };

        var ctx = document.getElementById("myAreaChartAdhoc").getContext('2d');
        var myLineChart = new Chart(ctx, chartSettingsAdhoc);

        var ctx = document.getElementById("myAreaChartBatch").getContext('2d');
        var myLineChart = new Chart(ctx, chartSettingsBatch);

        var ctx = document.getElementById("messagesChart").getContext('2d');
        var myLineChart = new Chart(ctx, chartSettingsMessages);

        var table = null;
        $(document).ready(function () {
            table = $('#dataTable').DataTable({
                dom: 'Bfrtip',
                buttons: [
                    'csv'
                ]
            });
        });

        @*function download_csv() {
            var headers = @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.TableHeaders);
            var csv = headers.join(',') + "\n";
            var data = @bi_testproj.Utils.JavaScriptConvert.SerializeObject(ViewBag.TableRows);
            data.forEach(function (row) {
                csv += row.join(',');
                csv += "\n";
            });

            var hiddenElement = document.createElement('a');
            hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
            hiddenElement.target = '_blank';
            hiddenElement.download = 'data.csv';
            hiddenElement.click();
        }*@

    </script>
}
    <div class="chart-container">
        <div class="chart-wrapper">
            <div class="card-header">
                <i class="fas fa-chart-area"></i>
                Adhoc Results
            </div>
            <div class="card-body"><canvas id="myAreaChartAdhoc" width="100%" height="90%"></canvas></div>
        </div>
        <div class="chart-wrapper">
            <div class="card-header">
                <i class="fas fa-chart-area"></i>
                Batch Results
            </div>
            <div class="card-body"><canvas id="myAreaChartBatch" width="100%" height="90%"></canvas></div>
        </div>
        <div class="chart-wrapper">
            <div class="card-header">
                <i class="fas fa-chart-area"></i>
                Error Messages
            </div>
            <div class="card-body"><canvas id="messagesChart" width="100%" height="90%"></canvas></div>
        </div>
    </div>
    <div class="table-container">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            @foreach (var headerValue in @ViewBag.TableHeaders)
                            {
                                <th>@headerValue</th>
                            }
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            @foreach (var headerValue in @ViewBag.TableHeaders)
                            {
                                <th>@headerValue</th>
                            }
                        </tr>
                    </tfoot>
                    <tbody>
                        @foreach (var row in @ViewBag.TableRows)
                        {
                        <tr>
                            @foreach (var rowValue in @row)
                            {
                            <th>@rowValue</th>
                            }
                        </tr>
                        }

                    </tbody>
                    </table>
            </div>
        </div>
    </div>
